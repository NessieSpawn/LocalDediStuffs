global function Modified_Loadouts_Init

const array<string> modifiedPlayer = ["1007270968017"]
const array<string> unNessiedWeapons = ["mp_weapon_arc_launcher", "mp_weapon_defender", "mp_weapon_rocket_launcher", "mp_weapon_mgl"]
array<string> altBackupPlayers = []

void function Modified_Loadouts_Init()
{
    //AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	// register things for ingame script
	if( GetGameState() >= eGameState.Prematch )
	{
		foreach( entity player in GetPlayerArray() )
			OnClientConnected( player )
	}
	AddCallback_OnClientConnected( OnClientConnected )
}

void function OnPlayerRespawned( entity player )
{
	thread ModifiedPlayerLoadout( player )
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	thread ModifiedPlayerLoadout( player )
}

void function OnClientConnected( entity player )
{
	if( modifiedPlayer.contains( player.GetUID() ) )
		AddPlayerHeldButtonEventCallback( player, IN_MELEE, CallbackFuncSwitchBackupWeapon, 0.3 )
}

void function ModifiedPlayerLoadout( entity player )
{
	if( modifiedPlayer.contains( player.GetUID() ) )
	{
		/*
		if( player.GetMainWeapons()[0].GetWeaponClassName() == "mp_weapon_wingman_n" )
		{
			player.TakeWeaponNow( player.GetMainWeapons()[0].GetWeaponClassName() )
			player.GiveWeapon( "mp_weapon_wingman_n", ["silencer", "ricochet"] )
		}
		*/
		foreach( entity weapon in player.GetMainWeapons() )
		{
			string className = weapon.GetWeaponClassName()
			if( altBackupPlayers.contains( player.GetUID() ) )
			{
				if( className == "mp_weapon_wingman" )
				{
					player.TakeWeaponNow( className )
					player.GiveWeapon( "mp_weapon_wingman_n", ["nessie_balance"] )
					continue
				}
				if( className == "mp_weapon_autopistol" )
				{
					player.TakeWeaponNow( className )
					player.GiveWeapon( "mp_weapon_shotgun_pistol", ["nessie_balance"] )
					continue
				}
			}
			if( !unNessiedWeapons.contains( className ) )
			{
				if( className == "mp_weapon_lstar" )
				{
					player.TakeWeaponNow( className )
					player.GiveWeapon( className, ["nessie_balance", "reloadanimtest"] )
					continue
				}
				player.TakeWeaponNow( className )
				player.GiveWeapon( className, ["nessie_balance"] )
			}
			if( unNessiedWeapons.contains( className ) )
				player.TakeWeaponNow( className )
		}
		if( player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName() == "mp_weapon_thermite_grenade" )
		{
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName() )
			player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_ORDNANCE, ["ninja_projectile"] )
		}	
		if( player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName() == "mp_weapon_grenade_sonar" )
		{
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName() )
			player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_SPECIAL, ["ninja_projectile"] )
		}
		WaitFrame()
		if( IsValid( player ) )
			PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
	}
}

void function CallbackFuncSwitchBackupWeapon( entity player )
{
	string uid = player.GetUID()
	if( !altBackupPlayers.contains( uid ) )
	{
		SendHudMessage(player, "副手武器：精英", -1, 0.3, 255, 255, 0, 255, 0.15, 3, 0.15)
		altBackupPlayers.append( uid )
		return
	}
	if( altBackupPlayers.contains( uid ) )
	{
		SendHudMessage(player, "副手武器：原版", -1, 0.3, 255, 255, 0, 255, 0.15, 3, 0.15)
		altBackupPlayers.fastremovebyvalue( uid )
		return
	}
}