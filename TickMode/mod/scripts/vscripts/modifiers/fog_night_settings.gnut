global function Nessie_EnvFog_NightMap_Init

void function Nessie_EnvFog_NightMap_Init()
{
    if ( GetCurrentPlaylistVarInt( "fog_enabled", 0 ) != 0 )
    {
        AddSpawnCallback( "env_fog_controller", InitEnvFog )
        Highlight_HideDefaultEnemyHighlight( true )
    }

    // name control can apply to any condition, not necessary to enable fog
    AddSpawnCallback( "npc_titan", TryHideEntityNameAndMapIcon )
    AddCallback_OnPlayerRespawned( TryHideEntityNameAndMapIcon )

    if ( GetCurrentPlaylistVarInt( "night_enabled", 0 ) != 0 )
        AddCallback_OnClientConnected( SetPlayerToNightSky )
}

void function InitEnvFog( entity fogController )
{
    fogController.kv.fogztop = GetCurrentPlaylistVarFloat( "fog_fogztop", 60000.0 ).tostring()
	fogController.kv.fogzbottom = GetCurrentPlaylistVarFloat( "fog_fogzbottom", 60000.0 ).tostring()
	fogController.kv.foghalfdisttop = GetCurrentPlaylistVarFloat( "fog_foghalfdisttop", 60000.0 ).tostring()
	fogController.kv.foghalfdistbottom = GetCurrentPlaylistVarFloat( "fog_foghalfdistbottom", 200.0 ).tostring()
	fogController.kv.fogdistoffset = GetCurrentPlaylistVarFloat( "fog_fogdistoffset", 800.0 ).tostring()
	fogController.kv.fogdensity = max( 1.0, GetCurrentPlaylistVarFloat( "fog_fogdensity", 1.0 ) ).tostring()

	fogController.kv.forceontosky = bool( GetCurrentPlaylistVarInt( "fog_forceontosky", 1 ) )
}

void function SetPlayerToNightSky( entity player )
{
    player.SetSkyCamera( GetEnt( SKYBOXSPACE ) )

    float bloomScale = GetCurrentPlaylistVarFloat( "night_bloom_scale", 1.0 )
    bool fogEnabled = true // conflicts with fog, will only apply if fog is disabled!
    if ( GetCurrentPlaylistVarInt( "fog_enabled", 0 ) == 0 )
        fogEnabled = bool( GetCurrentPlaylistVarInt( "night_fog_enabled", 1 ) )
    float sunScale = max( 0.0, GetCurrentPlaylistVarFloat( "night_sun_scale", 0.0 ) ) // sun scale have to be higher than 0
    float skyScale = GetCurrentPlaylistVarFloat( "night_sky_scale", 0.5 )
    Remote_CallFunction_NonReplay( player, "ServerCallback_SetMapSettings", bloomScale, fogEnabled, null, null, null, null, null, sunScale, skyScale )
}

void function TryHideEntityNameAndMapIcon( entity ent )
{
    thread TryHideEntityNameAndMapIcon_Threaded( ent )
}

void function TryHideEntityNameAndMapIcon_Threaded( entity ent )
{
    ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDeath" )
    
    // minimap icon
    bool hideMapForEnemy = bool( GetCurrentPlaylistVarInt( "fog_disable_enemy_map", 0 ) )
    bool hideMapForFriendly = false
    if ( bool( GetCurrentPlaylistVarInt( "fog_disable_all_map", 0 ) ) )
    {
        hideMapForEnemy = true
        hideMapForFriendly = true
    }
    int friendlyTeam = ent.GetTeam()
    int enemyTeam
    if ( ent.GetTeam() == TEAM_IMC || ent.GetTeam() == TEAM_MILITIA )
        enemyTeam = GetOtherTeam( ent.GetTeam() )
    if ( hideMapForEnemy && enemyTeam > TEAM_UNASSIGNED )
        ent.Minimap_Hide( enemyTeam, null )
    if ( hideMapForFriendly && friendlyTeam > TEAM_UNASSIGNED )
		ent.Minimap_Hide( friendlyTeam, null )

    // name
    bool showNameToEnemy = !bool( GetCurrentPlaylistVarInt( "fog_disable_enemy_name", 0 ) )
    bool showNameToFriendly = true
    if ( bool( GetCurrentPlaylistVarInt( "fog_disable_all_name", 0 ) ) )
    {
        showNameToEnemy = false
        showNameToFriendly = false
    }

    // default condition: show name to all players. we don't do loop
    if ( showNameToEnemy && showNameToFriendly )
        return

    while ( true )
    {
        if ( !showNameToEnemy )
            ent.SetNameVisibleToEnemy( false )
        if ( !showNameToFriendly )
            ent.SetNameVisibleToFriendly( false )
        WaitFrame()
    }
}