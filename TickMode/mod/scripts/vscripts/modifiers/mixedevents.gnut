// this can enable together with equipmentsFilter and randomGamePilot!
global function RandomizedEvent_Init 

global function NotifyOffhandChange // for some mutators announce players

struct
{
	string activeMutator = ""
} file


void function RandomizedEvent_Init()
{
	file.activeMutator = GetRandomMutator_ReturnString()

	//AddCallback_OnClientConnected( OnClientConnected ) // no need to do this anymore
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_GameStateEnter( eGameState.Playing, OnGamePlaying )

	Riff_ForceTitanAvailability( eTitanAvailability.Never )
    Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
}

void function OnClientConnected( entity player )
{
	thread DelayedAnnounceCurrentMutatorToPlayer( player )
}

void function OnPlayerRespawned( entity player )
{
	if( GetGameState() == eGameState.Prematch )
		thread AnnounceCurrentMutatorToPlayerWhenIntroEnd( player )
	else
		thread DelayedAnnounceCurrentMutatorToPlayer( player )
	thread DisableBoostBar( player )
}

void function OnPlayerChangeLoadout( entity player, PilotLoadoutDef p )
{
	player.TakeOffhandWeapon( OFFHAND_MELEE ) // melee is never allowed
}

void function OnGamePlaying()
{
	//thread OnGamePlaying_Threaded() // has been replaced by "WhenIntroOver" functions
	foreach( entity player in GetPlayerArray() )
		thread DisableBoostBar( player )
}

void function OnGamePlaying_Threaded()
{
	wait 10
	foreach( entity player in GetPlayerArray() )
		thread DelayedAnnounceCurrentMutatorToPlayer( player )
}

///// FUNCTIONS /////

void function NotifyOffhandChange( entity player, string prevOffhand, string newOffhand )
{
	if( GetGameState() <= eGameState.Prematch )
	{
		thread NotifyOffhandChangeWhenIntroEnd( player, prevOffhand, newOffhand )
		return
	}

	string prevName = GetOffhandWeaponNameFromClassName( prevOffhand )
	string newName = GetOffhandWeaponNameFromClassName( newOffhand )

	NSSendInfoMessageToPlayer( player, prevName + " 已被替換至 " + newName )
}

void function NotifyOffhandChangeWhenIntroEnd( entity player, string prevOffhand, string newOffhand )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	wait 1 // good wait
	while ( HasCinematicFlag( player, CE_FLAG_INTRO ) || HasCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) || HasCinematicFlag( player, CE_FLAG_WAVE_SPAWNING ) )
		WaitFrame()

	wait 0.4 // extra wait for black lines around screen to disappear
	NotifyOffhandChange( player, prevOffhand, newOffhand )
}

void function AnnounceCurrentMutatorToPlayerWhenIntroEnd( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	wait 1 // good wait
	while ( HasCinematicFlag( player, CE_FLAG_INTRO ) || HasCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) || HasCinematicFlag( player, CE_FLAG_WAVE_SPAWNING ) )
		WaitFrame()

	if( Flag( "DropshipIntro" ) ) // if using dropship intro, announce while jumping to avoid being overwrited by gamemodeAnnouncements
		thread DelayedAnnounceCurrentMutatorToPlayer( player )
	else
	{ // no dropship intro, announce after gamemodeAnnouncements
		wait 3
		thread DelayedAnnounceCurrentMutatorToPlayer( player )
	}
}

// this is needed, Announcement goes later or other RUIs will always show it's subtext! horriable!
void function DelayedAnnounceCurrentMutatorToPlayer( entity player )
{
	wait 0.3
	if( IsAlive( player ) )
		AnnounceCurrentMutatorToPlayer( player )
}

// !!!!this must up on date!
void function AnnounceCurrentMutatorToPlayer( entity player )
{
	switch( file.activeMutator ) 
	{
		case "": // no mutator selected
			return
		case "acceleration":
			//ClientCommand( player, "script_client AnnouncementMessage( GetLocalClientPlayer(), \"擊殺敵人來獲取加速\", \"隨機突變已選取\" )" )
			NSSendAnnouncementMessageToPlayer( player, "擊殺敵人以獲取加速", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "switchcharoo":
			//ClientCommand( player, "script_client AnnouncementMessage( GetLocalClientPlayer(), \"擊殺敵人后交換位置與速度\", \"隨機突變已選取\" )" )
			NSSendAnnouncementMessageToPlayer( player, "擊殺敵人后交換位置", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "weaponstealing":
			//ClientCommand( player, "script_client AnnouncementMessage( GetLocalClientPlayer(), \"擊殺敵人以奪取其裝備\", \"隨機突變已選取\" )" )
			NSSendAnnouncementMessageToPlayer( player, "擊殺敵人后奪取其裝備", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "moongravity":
			//ClientCommand( player, "script_client AnnouncementMessage( GetLocalClientPlayer(), \"在室外得到低重力\", \"隨機突變已選取\" )" )
			NSSendAnnouncementMessageToPlayer( player, "在室外獲得低重力", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "elitist":
			//ClientCommand( player, "script_client AnnouncementMessage( GetLocalClientPlayer(), \"空速受限，速度低時降低生命\", \"隨機突變已選取\" )" )
			NSSendAnnouncementMessageToPlayer( player, "速度低時降低生命", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "classwar":
			NSSendAnnouncementMessageToPlayer( player, "所有玩家同時使用隨機一名玩家的配裝", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "twingrenades":
			NSSendAnnouncementMessageToPlayer( player, "獲得兩種重火力, 無戰術技能", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		case "twintacticals":
			NSSendAnnouncementMessageToPlayer( player, "獲得兩種戰術技能, 無重火力", "隨機突變已選取", < 255, 0, 0 >, 2, 1 ) // 1 means ANNOUNCEMENT_STYLE_QUICK
			break
		default:
			return
	}
}

///// UTILITIES /////

string function GetOffhandWeaponNameFromClassName( string className )
{
	switch( className )
	{
		case "mp_ability_cloak":
			return "隱形"
		case "mp_ability_grapple":
			return "鈎爪"
		case "mp_ability_heal":
			return "興奮藥劑"
		case "mp_ability_holopilot":
			return "幻影鐡馭"
		case "mp_ability_shifter":
			return "瞬間轉移"
		case "mp_weapon_grenade_sonar":
			return "脈衝刀"
		case "mp_weapon_deployable_cover":
			return "A障壁"

		case "mp_weapon_satchel":
			return "炸彈包"
		case "mp_weapon_grenade_electric_smoke":
			return "電子煙幕手榴彈"
		case "mp_weapon_grenade_emp":
			return "電弧手榴彈"
		case "mp_weapon_grenade_gravity":
			return "重力星"
		case "mp_weapon_frag_grenade":
			return "破片手榴彈"
		case "mp_weapon_thermite_grenade":
			return "飛火星"
	}
	return "未知武器"
}

string function GetRandomMutator_ReturnString()
{
	switch( RandomInt( 8 ) ) // RandomInt( 8 ), should always match total mutator count
	{
		case 0:
			Acceleration_Init()
			return "acceleration"
		case 1:
			Switcharoo_Init()
			return "switchcharoo"
		case 2:
			WeaponStealing_Init()
			return "weaponstealing"
		case 3:
			GRAVITYRIFF_Init()
			return "moongravity"
		case 4:
			Elitist_Init()
			return "elitist"
		case 5:
			ClassWar_init()
			return "classwar"
		case 6:
			TwinGrenades_Init()
			return "twingrenades"
		case 7:
			TwinTacticals_Init()
			return "twintacticals"
		default:
			return ""
	}
	return ""
}

void function DisableBoostBar( entity player )
{
    WaitFrame()
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}