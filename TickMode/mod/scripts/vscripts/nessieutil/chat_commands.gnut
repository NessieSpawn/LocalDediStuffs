global function Nessie_ChatCommands_Utility_Init

global function NessieChatCommands_Register // main utility

struct
{
    array<string> commandsRegistered
    table< string, array<ClServer_MessageStruct functionref( ClServer_MessageStruct )> > commandCallbacks
} file

void function Nessie_ChatCommands_Utility_Init()
{
    AddCallback_OnReceivedSayTextMessage( OnReceiveChatMessage )
}

// main utility
void function NessieChatCommands_Register( string command, ClServer_MessageStruct functionref( ClServer_MessageStruct ) callbackFunc )
{
    if ( !file.commandsRegistered.contains( command ) )
        file.commandsRegistered.append( command )
    if ( !( command in file.commandCallbacks ) )
        file.commandCallbacks[ command ] <- []
    if ( !file.commandCallbacks[ command ].contains( callbackFunc ) )
        file.commandCallbacks[ command ].append( callbackFunc )
}

ClServer_MessageStruct function OnReceiveChatMessage( ClServer_MessageStruct msgStruct )
{
    string message = msgStruct.message
    array<string> splitedMsg = split( message, " " ) // split with white space

    // check command. should be placed at [0]
    foreach ( string command in file.commandsRegistered )
    {
        if ( splitedMsg[0] == command && ( command in file.commandCallbacks ) ) // find registered command!
        {
            // run callbacks
            foreach ( ClServer_MessageStruct functionref( ClServer_MessageStruct ) callbackFunc in file.commandCallbacks[ command ] )
                msgStruct = callbackFunc( msgStruct )
            break
        }
    }

    return msgStruct
}