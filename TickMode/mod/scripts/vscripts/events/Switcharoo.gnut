untyped // for ent.Fire() to work

global function Switcharoo_Init
void function Switcharoo_Init(){
    #if SERVER
    AddCallback_OnPlayerKilled(Swap)
	//AddCallback_OnNPCKilled(Swap) // test
    #endif
}
bool function SwitcharooEnabled(){
    return true
}
#if SERVER
void function Swap(entity victim, entity attacker, var damageInfo)
{
    if(SwitcharooEnabled() && attacker.IsPlayer() )//&& victim.IsPlayer())
	{
		thread CreateSwapTracer( attacker, victim )
		entity phaseFX = PlayFX( $"P_phase_shift_main", victim.GetOrigin() )
		phaseFX.SetOwner( attacker )
		phaseFX.kv.VisibilityFlags = (ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY) // not owner only
		attacker.SetOrigin(victim.GetOrigin())
		//attacker.SetAngles(victim.GetAngles())
		attacker.SetVelocity(victim.GetVelocity())
		thread SwapPositionProtection( attacker )
		FindNearestSafeSpotAndPutEntity( attacker, 1 )
    }
}

void function CreateSwapTracer( entity player, entity destEnt, float lifeTime = 2.0, asset beamEffectName = $"P_wpn_defender_beam" )
{
	entity cpEnd = CreateEntity( "info_placement_helper" )
	int attachmentIndex = destEnt.LookupAttachment( "CHESTFOCUS" )
	if( attachmentIndex > 0 )
		cpEnd.SetOrigin( destEnt.GetAttachmentOrigin( attachmentIndex ) )
	else
		cpEnd.SetOrigin( destEnt.GetOrigin() )
	SetTargetName( cpEnd, UniqueString( "swap_pos_tracer_cpEnd" ) )
	DispatchSpawn( cpEnd )
	
	
	entity tracer = CreateEntity( "info_particle_system" )
	tracer.kv.cpoint1 = cpEnd.GetTargetName()
	tracer.SetValueForEffectNameKey( beamEffectName )
	tracer.kv.start_active = 1
	
	attachmentIndex = player.LookupAttachment( "CHESTFOCUS" )
	if( attachmentIndex > 0 )
		tracer.SetOrigin( player.GetAttachmentOrigin( attachmentIndex ) )
	else
		tracer.SetOrigin( player.GetOrigin() )

	DispatchSpawn( tracer )

	OnThreadEnd( 
		function(): ( cpEnd, tracer )
		{
			if( IsValid( cpEnd ) )
				cpEnd.Destroy()
			if( IsValid( tracer ) )
				tracer.Destroy()
		}
	)

	tracer.Fire( "Start" )
	tracer.Fire( "StopPlayEndCap", "", lifeTime )
	tracer.Kill_Deprecated_UseDestroyInstead( lifeTime )
	cpEnd.Kill_Deprecated_UseDestroyInstead( lifeTime )
}

void function SwapPositionProtection( entity player ) // avoid projectiles killing player themselves
{
    player.EndSignal( "OnDestroy" )
    player.SetInvulnerable()
    wait 0.3
    player.ClearInvulnerable()
}
#endif