untyped // for player.SetPlayerSettings() to work
global function ClassWar_init

//Struct
struct{
    PilotLoadoutDef& StoredPilotLoadout
    string storedPilotName = "UNASSIGNED"
	array<string> chosenPilotNames
    //PilotLoadoutDef& StoredPilotLoadoutMilitia
    //PilotLoadoutDef& StoredPilotLoadoutIMC
}file

//Init
void function ClassWar_init()
{
    //AddPrivateMatchModeSettingEnum("#MODE_SETTING_CATEGORY_RIFFPACK", "ClassWar", ["#SETTING_DISABLED", "#CLASSWAR_TEAMS", "#CLASSWAR_GLOBAL"], "0")
    #if SERVER
    // modified settings
    IgnoreEquipmentsFilter( "All" )
    SetLoadoutGracePeriodEnabled( false )

    //AddCallback_OnPlayerRespawned( OnPlayerRespawn )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
    AddCallback_GameStateEnter( eGameState.Playing, onstart )
    #endif
}
#if SERVER
//Bool
bool function ClassWarEnabled()
{
    return true // (GetCurrentPlaylistVarInt("ClassWar", 0) == 1 || GetCurrentPlaylistVarInt("ClassWar", 0) == 2)
}
//Callbacks
void function OnPlayerChangeLoadout(entity player, PilotLoadoutDef loadout)
{
    if(ClassWarEnabled() && GetGameState() == eGameState.Playing)
    {
        OnPlayerRespawn(player)
    }
}
//if(ClassWarEnabled() && GetGameState() == eGameState.Playing)

void function OnPlayerRespawn(entity player){
    if(ClassWarEnabled() && player.GetOffhandWeapons().len() != 0 && player.GetMainWeapons().len() !=0 && GetGameState() == eGameState.Playing)
    {
        PopulatePilotLoadout(player)
    }
}
//GetPilotLoadoutFromPersistentData
void function onstart()
{
    /*
    if(GetCurrentPlaylistVarInt("ClassWar", 0) == 2)
    {
        if(GetPlayerArrayOfTeam( TEAM_MILITIA ).len() > 0)
        {
            file.StoredPilotLoadoutMilitia = GetActivePilotLoadout(GetPlayerArrayOfTeam( TEAM_MILITIA )[RandomInt(GetPlayerArrayOfTeam( TEAM_MILITIA ).len())])
        }
        if(GetPlayerArrayOfTeam( TEAM_IMC ).len() > 0)
        {
            file.StoredPilotLoadoutIMC = GetActivePilotLoadout(GetPlayerArrayOfTeam( TEAM_IMC )[RandomInt(GetPlayerArrayOfTeam( TEAM_IMC ).len())])
        }
    }
    //if(GetCurrentPlaylistVarInt("ClassWar", 0) == 1)
    if( ClassWarEnabled() ) // i'm enabling this now
    {
        file.StoredPilotLoadout = GetActivePilotLoadout(GetPlayerArray()[RandomInt(GetPlayerArray().len())])
    }
    if(ClassWarEnabled())
    {
    foreach(entity player in GetPlayerArray())
        {
            OnPlayerRespawn(player)
        }
    }
    */
    if( ClassWarEnabled() )
        thread ClassWarLoadoutSettingsThink()
}

// Functions
void function PopulatePilotLoadout(entity player)
{
    /*
    if(GetCurrentPlaylistVarInt("ClassWar", 0) == 2)
    {
        if(player.GetTeam() == TEAM_IMC)
        {
            foreach(string mod in file.StoredPilotLoadoutIMC.primaryMods)
                print(mod)
            player.GiveWeapon(       file.StoredPilotLoadoutIMC.primary)
            player.GiveWeapon(       file.StoredPilotLoadoutIMC.secondary)
            player.GiveWeapon(       file.StoredPilotLoadoutIMC.weapon3)
            player.GiveOffhandWeapon(file.StoredPilotLoadoutIMC.ordnance, OFFHAND_RIGHT)
            player.GiveOffhandWeapon(file.StoredPilotLoadoutIMC.special, OFFHAND_LEFT)
        }
        if(player.GetTeam() == TEAM_MILITIA)
        {
            foreach(string mod in file.StoredPilotLoadoutMilitia.primaryMods)
                print(mod)
            
            player.GiveWeapon(       file.StoredPilotLoadoutMilitia.primary)
            player.GiveWeapon(       file.StoredPilotLoadoutMilitia.secondary)
            player.GiveWeapon(       file.StoredPilotLoadoutMilitia.weapon3)
            player.GiveOffhandWeapon(file.StoredPilotLoadoutMilitia.ordnance, OFFHAND_RIGHT, file.StoredPilotLoadoutMilitia.ordnanceMods)
            player.GiveOffhandWeapon(file.StoredPilotLoadoutMilitia.special, OFFHAND_LEFT,   file.StoredPilotLoadoutMilitia.specialMods)
        }
    }
    */
    //if(GetCurrentPlaylistVarInt("ClassWar", 0) == 1)
    if( ClassWarEnabled() ) // i'm enabling this now
    {
        foreach(entity weapon in player.GetMainWeapons())
            player.TakeWeaponNow(weapon.GetWeaponClassName())
        foreach(entity weapon in player.GetOffhandWeapons())
            player.TakeWeaponNow(weapon.GetWeaponClassName())
        
        array<string> primaryMods = file.StoredPilotLoadout.primaryMods
		primaryMods.append( file.StoredPilotLoadout.primaryAttachment )
        primaryMods.removebyvalue( "null" )
        player.GiveWeapon( file.StoredPilotLoadout.primary, primaryMods )

        array<string> secondaryMods = file.StoredPilotLoadout.secondaryMods
        secondaryMods.removebyvalue( "null" )
        player.GiveWeapon( file.StoredPilotLoadout.secondary, secondaryMods )

        array<string> weapon3Mods = file.StoredPilotLoadout.weapon3Mods
        weapon3Mods.removebyvalue( "null" )
        player.GiveWeapon( file.StoredPilotLoadout.weapon3, weapon3Mods )

        player.GiveOffhandWeapon(file.StoredPilotLoadout.ordnance, OFFHAND_RIGHT, file.StoredPilotLoadout.ordnanceMods)
        player.GiveOffhandWeapon(file.StoredPilotLoadout.special, OFFHAND_LEFT,   file.StoredPilotLoadout.specialMods)
        player.SetPlayerSettings( file.StoredPilotLoadout.setFile )

        NSSendInfoMessageToPlayer( player, "正在使用 " + file.storedPilotName + " 的配裝! " )
    }
}

void function ClassWarLoadoutSettingsThink()
{
    svGlobal.levelEnt.EndSignal( "GameStateChanged" )

    bool firstLoadout = true
    while( GetGameState() == eGameState.Playing )
    {
		WaitFrame() // always do a wait here
	
        entity chosePilot
		int playerCount = GetPlayerArray().len()
		if( playerCount == 0 ) // no players inside!
			continue
        if( firstLoadout ) // first choose, won't have same players
            chosePilot = GetPlayerArray()[RandomInt(playerCount)]
        else
        {
            chosePilot = GetPlayerArray()[RandomInt(playerCount)]

			if( file.chosenPilotNames.contains( chosePilot.GetPlayerName() ) ) // avoid choose twice!
				continue // loop back choose a new one
		}
		if( !IsValid( chosePilot ) ) // no pilot chosen, maybe because no players in game, loop again
			continue
	
        file.StoredPilotLoadout = GetActivePilotLoadout( chosePilot )
        file.storedPilotName = chosePilot.GetPlayerName()
		file.chosenPilotNames.append( chosePilot.GetPlayerName() )
        if( !firstLoadout )
        {
            foreach( entity player in GetPlayerArray() )
			{
                NSSendLargeMessageToPlayer( player, "配裝已更新! ", "現在起將使用 " + file.storedPilotName + " 的配裝", 10, "rui/callsigns/callsign_69_col" )
				OnPlayerRespawn( player ) // change loadout immediately
			}
		}
        else // first loadout, replace all player's loadouts
        {
            foreach( entity player in GetPlayerArray() )
                OnPlayerRespawn( player )
        }
        firstLoadout = false

        wait 120 // every 2min change loadout
    }
}
#endif