global function PublicTitanEmbark_Init

global function SetTitanEmbarkAvaliableToAll

const float NO_LIMIT_EMBARK_RANGE = 210

struct
{
	bool titanEmbarkAvaliableToAll
} file

void function PublicTitanEmbark_Init()
{
	AddCallback_OnClientConnected( OnClientConnected )
}

void function SetTitanEmbarkAvaliableToAll( bool avaliable )
{
	file.titanEmbarkAvaliableToAll = avaliable
}

void function OnClientConnected( entity player )
{
	// I know setting titans usable is better, but I don't want to conflict with _titan_npc.gnut
	AddPlayerHeldButtonEventCallback( player, IN_USE, TryEmbarkAnyTitan, 0.2 )
	AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, TryEmbarkAnyTitan, 0.2 )
}

void function TryEmbarkAnyTitan( entity player )
{
	if( !file.titanEmbarkAvaliableToAll )
		return
	if( !IsAlive( player ) ) // avoid embarking after died... omg! TitanIsCurrentlyEmbarkableForPlayer() not handling this( I think it's because normal "USE" button won't take effect after client died )
		return
	if( player.IsTitan() )
		return
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * NO_LIMIT_EMBARK_RANGE, player, (TRACE_MASK_SOLID | TRACE_MASK_SHOT), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
		return
	entity target = traceResult.hitEnt
	if( !IsValid( target ) )
		return
	if( target.IsPlayer() )
		return
	if( !target.IsTitan() )
		return
	if( player.GetPetTitan() == target ) // owned titan, use regular embark
		return
	if( !TitanIsCurrentlyEmbarkableForPlayer( player, target ) )
		return
	if( TitanHasNpcPilot( target ) ) // titan has become pilot controlled?
		return
	if( FindBestEmbark( player, target ) == null )
		return
	// checks passed, do embark
	table embarkDirection = expect table( FindBestEmbark( player, target ) )
	thread PlayerEmbarksTitan( player, target, embarkDirection )
}