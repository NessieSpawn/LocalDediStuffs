global function Primary_MeleeWeapon_Init

// funny melee: hold melee button to get yourself a melee primary, cannot attack
global function PrimaryMelee_SetFunnyMeleeEnableToAll
global function PrimaryMelee_SetFunnyMeleeEnableToPlayer

// hardcoded, don't know how to get a weapon's fire_mode from mods
array<string> MAIN_MELEE_MODS =
[
	"allow_as_primary",
]

// this really should be a callback
array<string> SWITCH_DISALLOWED_MODS =
[
	"dash_punch",
	"bison_punch",
]

struct
{
	// primary melee
	table<entity, float> playerMessageAllowedTime

	// funny melee
	bool funnyMeleeToAll = false
	table<entity, bool> playerCanUseFunnyMelee
	table<entity, bool> playerHasFunnyMelee
} file

void function Primary_MeleeWeapon_Init()
{
	AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
	// init
	// primary melee
	file.playerMessageAllowedTime[ player ] <- 0.0
	// funny melee
	file.playerCanUseFunnyMelee[ player ] <- false
	file.playerHasFunnyMelee[ player ] <- false

	// button registering
	// primary melee
	AddButtonPressedPlayerInputCallback( player, IN_MELEE, MeleeNotice )
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM, SwitchOffMelee )
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, SwitchOffMelee )
	// funny melee
	AddPlayerHeldButtonEventCallback( player, IN_MELEE, SwitchToFunnyMelee, 0.5 )
}

// primary melee
void function MeleeNotice( entity player )
{
	if ( PlayerCanSwitchOffMeleeWeapon( player ) )
		TrySendHudMessageToPlayer( player, "按瞄准键 收回近战武器" )
}

void function SwitchOffMelee( entity player )
{
	if ( player.PlayerMelee_IsAttackActive() ) // don't switch off if player already in a melee state
		return

	if ( PlayerCanSwitchOffMeleeWeapon( player ) )
		player.ClearOffhand() // force player to pull out their last main weapon
}

bool function PlayerCanSwitchOffMeleeWeapon( entity player )
{
	if( !IsAlive( player ) )
		return false

	// cannot switch off funny melee!
	if ( file.playerHasFunnyMelee[ player ] )
		return false

	array<entity> mainWeapons = player.GetMainWeapons()
	if ( mainWeapons.len() == 0 )
		return false

	entity meleeWeapon = player.GetMeleeWeapon()
	if ( !IsValid( meleeWeapon ) )
		return false

	array<string> mods = meleeWeapon.GetMods()
	bool hasAllowedMods = false
	foreach ( string mod in mods )
	{
		if ( MAIN_MELEE_MODS.contains( mod ) )
		{
			hasAllowedMods = true
			break
		}
	}
	if ( !hasAllowedMods )
		return false

	bool hasDisallowedMods = false
	foreach ( string mod in mods )
	{
		if ( SWITCH_DISALLOWED_MODS.contains( mod ) )
		{
			hasDisallowedMods = true
			break
		}
	}

	if ( hasDisallowedMods )
		return false

	// all checks done!
	return true
}

const float MESSAGE_COOLDOWN = 3.0
bool function TrySendHudMessageToPlayer( entity player, string message )
{
	if ( Time() < file.playerMessageAllowedTime[ player ] )
		return false

	SendHudMessage( player, message, -1, -0.4, 200, 200, 225, 255, 0.15, 2.0, 0.5 )
	file.playerMessageAllowedTime[ player ] = Time() + MESSAGE_COOLDOWN
	return true
}


// funny melee
void function PrimaryMelee_SetFunnyMeleeEnableToAll( bool enable )
{
	file.funnyMeleeToAll = enable
}

void function PrimaryMelee_SetFunnyMeleeEnableToPlayer( entity player, bool enable )
{
	file.playerCanUseFunnyMelee[ player ] = enable
}

void function SwitchToFunnyMelee( entity player )
{
	if ( !PlayerCanSwitchToFunnyMelee( player ) )
		return
	
	thread TrackPlayerFunnyMelee( player )
}

void function TrackPlayerFunnyMelee( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	player.GiveOffhandWeapon( "melee_pilot_sword", OFFHAND_MELEE, ["allow_as_primary", "pilot_emptyhanded", "no_damage"] )
	entity meleeWeapon = player.GetMeleeWeapon()
	meleeWeapon.EndSignal( "OnDestroy" )

	player.HolsterWeapon()
	player.SetActiveWeaponByName( "melee_pilot_sword" )
	player.DeployWeapon()

	file.playerHasFunnyMelee[ player ] = true

	TrySendHudMessageToPlayer( player, "按住瞄准键 收回近战武器(不可攻击)" )

	OnThreadEnd
	(
		function(): ( player )
		{
			if ( IsValid( player ) )
			{
				// clean up!
				player.TakeOffhandWeapon( OFFHAND_MELEE )
				file.playerHasFunnyMelee[ player ] = false
			}
		}
	)

	// restrictions check
	while ( true )
	{
		if ( player.PlayerMelee_IsAttackActive() ) // player tried to use melee!
		{
			// stop anything that could happen
			//player.Lunge_ClearTarget() // lunge handled in sh_melee_human
			player.PlayerMelee_EndAttack()
			player.Anim_StopGesture( 0 )
		}
		if ( player.IsInputCommandHeld( IN_ZOOM ) || player.IsInputCommandHeld( IN_ZOOM_TOGGLE ) )
			return
		if ( player.GetActiveWeapon() != meleeWeapon ) // switched off! might caused by wallclimbing
			return
		WaitFrame()
	}
}

bool function PlayerCanSwitchToFunnyMelee( entity player )
{
	if ( !IsAlive( player ) )
		return false
	if ( player.Anim_IsActive() ) // during an execution or something? don't mess up their weapons
		return false
	if ( !file.funnyMeleeToAll && !file.playerCanUseFunnyMelee[ player ] )
		return false
	if ( file.playerHasFunnyMelee[ player ] )
		return false
	if ( IsValid( player.GetMeleeWeapon() ) )
		return false

	return true
}