global function HoldingUp_Props_Init

global function HoldingProps_ButtonRegister_Init // used in loadedinits

// settings
global function HoldingProp_SetUseNotSolidHolding // holding prop will become not solid, prevent blocking shots

// utility
global function HoldingProp_PlayerTryPickUpEntity // shared entity picking up
global function HoldingProp_PlayerDropPickedEntity
global function HoldingProp_GetPlayerPickedProp // get player's current holding prop
global function HoldingProp_EntityCanBePickedUp
global function HoldingProp_SetEntityCanBePickedUpForced // force append more entities to pick up

struct
{
	bool propNotSolidHolding = false

	table<entity, entity> playerHoldingEntity
	table<entity, bool> entPickUpAllowForced
} file

const float HOLDING_PROP_OFFSET = 64 // distance between prop and player
const float HOLDING_PROP_SEARCH_RANGE = 300 // distance player can search for a prop to hold
const float HOLDING_PROP_TICK = 0.1 // WaitFrame() value
const string HOLDING_PROP_MOVER_SCRIPTNAME = "holding_prop_controller"
const array<string> HOLDING_PROP_ALLOWED_CLASSES =
[
	//"prop_dynamic",
	"prop_physics",
]

void function HoldingUp_Props_Init()
{
	RegisterSignal( "StopHoldingProp" )
	AddCallback_OnClientConnected( OnClientConnected )
}

void function HoldingProps_ButtonRegister_Init()
{
	AddCallback_OnClientConnected( ButtonCallbackSetting )
}

void function HoldingProp_SetUseNotSolidHolding( bool notSolid )
{
	file.propNotSolidHolding = notSolid
}

void function OnClientConnected( entity player )
{
	file.playerHoldingEntity[ player ] <- null
}

void function ButtonCallbackSetting( entity player )
{
	AddButtonPressedPlayerInputCallback( player, IN_USE, PickUpEntityWrapper )
	AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, PickUpEntityWrapper )
}

void function PickUpEntityWrapper( entity player )
{
	if ( IsValid( file.playerHoldingEntity[ player ] ) )
	{
		HoldingProp_PlayerDropPickedEntity( player )
		return
	}

	HoldingProp_PlayerTryPickUpEntity( player )
}

entity function HoldingProp_GetPlayerPickedProp( entity player )
{
	return file.playerHoldingEntity[ player ]
}

void function HoldingProp_SetEntityCanBePickedUpForced( entity ent, bool canPickUp )
{
	if ( !( ent in file.entPickUpAllowForced ) )
		file.entPickUpAllowForced[ ent ] <- false // default value
	file.entPickUpAllowForced[ ent ] = canPickUp
}

bool function HoldingProp_EntityCanBePickedUp( entity ent )
{
	if ( !IsValid( ent ) )
	{
		//Chat_ServerPrivateMessage( player, "目标不可用", false )
		return false
	}

	bool forcedPickUp = ent in file.entPickUpAllowForced && file.entPickUpAllowForced[ ent ]
	// forced pick up skips some checks
	if ( !forcedPickUp )
	{
		if ( !HOLDING_PROP_ALLOWED_CLASSES.contains( ent.GetClassName() ) )
		{
			//Chat_ServerPrivateMessage( player, "不可用的类型, 目标为: " + traceResult.hitEnt.GetClassName(), false )
			return false
		}
		if ( ent.GetOwner() != null || ent.GetBossPlayer() != null )
		{
			//Chat_ServerPrivateMessage( player, "该物体拥有主人", false )
			return false
		}
	}

	if ( IsValid( ent.GetParent() ) )
	{
		if ( ent.GetParent().GetScriptName() == HOLDING_PROP_MOVER_SCRIPTNAME )
			//Chat_ServerPrivateMessage( player, "已有一人在控制该物体", false )
		return false // never controls entity with parent
	}

	return true // all checks passed!
}

void function HoldingProp_PlayerDropPickedEntity( entity player )
{
	if ( IsValid( file.playerHoldingEntity[ player ] ) )
		player.Signal( "StopHoldingProp" ) // stop current holding
}

bool function HoldingProp_PlayerTryPickUpEntity( entity player )
{
	vector startPos = player.EyePosition()
	vector endPos = player.EyePosition() + player.GetViewVector() * HOLDING_PROP_SEARCH_RANGE
	TraceResults traceResult = TraceLine( startPos, 
										  endPos, 
										  player, 
										  (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), 
										  TRACE_COLLISION_GROUP_NONE )
	entity holdingProp = traceResult.hitEnt
	if ( !HoldingProp_EntityCanBePickedUp( holdingProp ) )
		return false

	thread PlayerHoldingThink( player, holdingProp )
	return true // successfully picked up something
}

void function PlayerHoldingThink( entity player, entity holdingProp )
{
	file.playerHoldingEntity[ player ] = holdingProp
	//entity beam = CreateEnvBeam( player, player, holdingProp )
	entity mover = CreateEntity( "script_mover" )
	mover.kv.SpawnAsPhysicsMover = 0
	mover.SetValueForModelKey( $"models/dev/empty_model.mdl" )
	mover.SetOrigin( holdingProp.GetOrigin() )
	DispatchSpawn( mover )
	mover.SetScriptName( HOLDING_PROP_MOVER_SCRIPTNAME )
	mover.NotSolid()
	//holdingProp.StopPhysics()
	holdingProp.SetParent( mover )

	// balance changes: not solid holding
	if ( file.propNotSolidHolding )
		holdingProp.NotSolid() // temp not solid

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "StopHoldingProp" )
	holdingProp.EndSignal( "OnDestroy" )

	table results =
	{
		lastTickPropPos = holdingProp.GetOrigin()
		curTickPropTargetPos = holdingProp.GetOrigin()
	}

	OnThreadEnd(
		function(): ( player, holdingProp, mover, results )
		{
			file.playerHoldingEntity[ player ] = null // clean up
			if( IsValid( holdingProp ) )
			{
				holdingProp.ClearParent()
				if ( file.propNotSolidHolding )
					holdingProp.Solid() // restore solid
				// better way to calculate throw force
				vector lastTickPos = expect vector( results.lastTickPropPos )
				vector nextTickPos = expect vector( results.curTickPropTargetPos )
				vector vel = nextTickPos - lastTickPos
				if ( IsValid( player ) )
					vel += player.GetVelocity()
				holdingProp.SetVelocity( vel )
			}
			//if( IsValid( beam ) )
			//	beam.Destroy()
			if( IsValid( mover ) )
				mover.Destroy()
		}
	)

	vector lastTickPlayerPos
	while( true )
	{
		lastTickPlayerPos = player.GetOrigin() // update before wait starts
		results.lastTickPropPos = holdingProp.GetOrigin()

		wait HOLDING_PROP_TICK // always wait first
		vector eyePosition = player.EyePosition()
		vector eyeAngle = player.EyeAngles()
		vector playerMovement = player.GetOrigin() - lastTickPlayerPos // we append last tick player's movement, so the prop won't move onto player's face
		vector holdingOffset = ( player.GetViewVector() * HOLDING_PROP_OFFSET ) + ( playerMovement )
		TraceResults traceResult = TraceLine( eyePosition, 
											  eyePosition + holdingOffset, 
											  [ player, holdingProp ], 
											  (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), 
											  TRACE_COLLISION_GROUP_NONE )
		vector targetPos = eyePosition + holdingOffset
		if( IsValid( traceResult.hitEnt ) ) // traced something! cap to endPos
			targetPos = traceResult.endPos
		mover.NonPhysicsMoveTo( targetPos, HOLDING_PROP_TICK + 0.0001, 0, 0 )
		results.curTickPropTargetPos = targetPos
		// we're using mover now
		//holdingProp.SetOrigin( targetPos )
		//holdingProp.SetVelocity( < 0,0,0 > )
		holdingProp.SetAngles( eyeAngle )
	}
}