global function BaseForcedPlaylist_Init

global function ForcedPlaylist_Disabled
global function ForcedPlaylist_SetPlaylistTypeOverrides
global function ForcedPlaylist_GetNextMap
global function ForcedPlaylist_GetNextMapName
global function ForcedPlaylist_SetShouldInstantlyChangeMap

// if using "Pilot" playlistType...
const array<string> FORCED_PILOT_PLAYLIST = 
[
    "mp_glitch",
    "mp_colony02",
    "mp_wargames",
    "mp_eden",
    "mp_drydock",
    "mp_black_water_canal",
    "mp_thaw",
    "mp_grave",
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_angel_city",
    "mp_relic02",
    //"mp_rise",
    //"mp_complex3",
    //"mp_crashsite3"
] // all maps

// if pilot game start with lf maps, loop it!
const array<string> PILOT_LF_PLAYLIST = 
[
    "mp_lf_stacks",
    "mp_lf_meadow",
    "mp_lf_deck",
    "mp_lf_traffic",
    "mp_lf_township",
    "mp_lf_uma"
]

// if using "Titan" playlistType...
const array<string> FORCED_TITAN_PLAYLIST =
[
    "mp_glitch",
    "mp_colony02",
    "mp_wargames",
    "mp_eden",
    "mp_drydock",
    "mp_black_water_canal",
    "mp_thaw",
    "mp_grave",
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_angel_city",
    "mp_relic02"
] // excluded mp_rise, mp_complex3 and mp_crashsite3

// if using "Modded" playlistType... requires edited maps mods
const array<string> FORCED_MODDED_PLAYLIST =
[
    "mp_black_water_canal",
    "mp_drydock",
    //"mp_glitch", // flipside only
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_rise"
]

struct
{
    bool shouldForceChange = true
    bool shouldInstantChange = false
    string forcedPlaylistType = "" // "Pilot", "Titan", "Modded"
} file

void function BaseForcedPlaylist_Init()
{
    ClassicMP_ForceDisableEpilogue( true ) // nobody likes epilogue!
    AddCallback_GameStateEnter( eGameState.Postmatch, ForcedMapChange )
}

void function ForcedPlaylist_Disabled( bool disable )
{
    file.shouldForceChange = !disable
}

void function ForcedPlaylist_SetPlaylistTypeOverrides( string listType )
{
    file.forcedPlaylistType = listType
}

void function ForcedPlaylist_SetShouldInstantlyChangeMap( bool should )
{
    file.shouldInstantChange = should
}

void function ForcedMapChange()
{
	if( !file.shouldForceChange )
		return
	thread BaseForcedPlaylist()
}

void function BaseForcedPlaylist()
{
	string nextMap = ForcedPlaylist_GetNextMap()

    if ( !file.shouldInstantChange ) // not instantly change maps
        wait 5 // do a interval
    
    ServerCommand( "map " + nextMap )
}

string function ForcedPlaylist_GetNextMap()
{
	string curMapName = GetMapName()
    bool isTitanGame = file.forcedPlaylistType == "Titan" || Riff_TitanAvailability() != eTitanAvailability.Never
    bool isModdedGame = file.forcedPlaylistType == "Modded"
    bool isLFMaps = PILOT_LF_PLAYLIST.contains( curMapName )

    array<string> curPlayList
    if( isModdedGame ) // goes first
        curPlayList = FORCED_MODDED_PLAYLIST
    else if( isTitanGame )
        curPlayList = FORCED_TITAN_PLAYLIST
    // pilot ones
    else if( isLFMaps )
        curPlayList = PILOT_LF_PLAYLIST
    else
        curPlayList = FORCED_PILOT_PLAYLIST

    int mapIndex = curPlayList.find( GetMapName() )
    mapIndex += 1 // next map index
	if( mapIndex == curPlayList.len() ) // reached last map?
		mapIndex = 0
	string map = curPlayList[mapIndex]

    return map
}

string function ForcedPlaylist_GetNextMapName( string map )
{
	switch( map )
	{
		case "mp_black_water_canal":
			return "黑水運河"
		case "mp_angel_city":
			return "天使城"
		case "mp_drydock":
			return "乾塢"
		case "mp_eden":
			return "伊甸"
		case "mp_colony02":
			return "殖民地"
		case "mp_relic02":
			return "遺跡"
		case "mp_grave":
			return "新興城鎮"
		case "mp_thaw":
			return "係外行星"
		case "mp_glitch":
			return "異常"
		case "mp_homestead":
			return "家園"
        case "mp_wargames":
			return "戰爭游戲"
        case "mp_forwardbase_kodai":
            return "虎大前進基地"
		case "mp_complex3":
			return "綜合設施"
		case "mp_rise":
			return "崛起"
		case "mp_crashsite3":
			return "墜機現場"
		default:
			return "未知地圖"
	}
	return "未知地圖"
}