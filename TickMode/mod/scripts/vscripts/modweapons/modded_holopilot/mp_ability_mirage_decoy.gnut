global function MpAbilityMirageDecoy_Init

global function OnWeaponPrimaryAtack_ability_mirage_decoy

const int MAX_DECOY_PER_PLAYER 				= 1 // changable
const int MIRAGE_DECOY_HEALTH 				= 80
const int MIRAGE_DECOY_DURATION				= 60

const string MIRAGE_DECOY_CONTROL_SIGNAL	= "ControlMirageDecoy"

// mirage_decoy, unused
/*
const float MIRAGE_DECOY_LIFETIME = 60.0
// hardcode every movement here
const string MIRAGE_DECOY_FORWARD = "DecoyMoveForward"
const string MIRAGE_DECOY_LEFT = "DecoyMoveLeft"
const string MIRAGE_DECOY_RIGHT = "DecoyMoveRight"
const string MIRAGE_DECOY_BACK = "DecoyMoveBack"
const string MIRAGE_DECOY_SPRINT = "DecoySprint"
const string MIRAGE_DECOY_CROUCH = "DecoyCrouch"
const string MIRAGE_DECOY_JUMP = "DecoyJump"
const string MIRAGE_DECOY_WALLRUN = "DecoyWallRun"
const string MIRAGE_DECOY_SLIDE = "DecoySlide"
struct MirageDecoyStruct
{
	entity decoy
	string lastAction
}
table< string, MirageDecoyStruct > mirageDecoyTable // use to track remote decoys
*/

/* // maybe useful:
	turretModel.SetPoseParameter( turretPoseData.turretLegPoseNames[footIndex], placementInfo.poseParamOffsets[footIndex] )
	titan.SetPoseParametersSameAs( player )
	titan.SequenceTransitionFromEntity( player )
	decoy.SetCloakDuration( 0, 0, 0 ) // will make decoys nolonger cloaked while spawning
*/

struct
{
	table < entity, array<entity> > playerControllingDecoys
	table <entity, float> decoyCreationTime
} file

void function MpAbilityMirageDecoy_Init()
{
	#if SERVER
	RegisterSignal( MIRAGE_DECOY_CONTROL_SIGNAL )
	#endif
}

void function OnWeaponPrimaryAtack_ability_mirage_decoy( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	/*
	entity decoy = CreateHoloPilotDecoys( weaponOwner, 1 )
	thread MirageDecoyThink( weaponOwner, decoy )
	*/
}

// mirage decoy stuff
#if SERVER
void function MirageDecoyThink( entity player, entity weapon )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "MirageDecoyEnd" )

	thread MirageDecoyLifeTimeManagement( decoy )
	RegisterMirageDecoyButton( player )
    
	while( true )
	{
		player.WaitSignal( MIRAGE_DECOY_CONTROL_SIGNAL )
		waitthread MirageDecoyControlThink( player )
	}
	
}

// this is for creating a mirage decoy which will replace player's current existing decoy!
void function UpdatePlayerMirageDecoy( entity player, entity weapon )
{
	array<entity> preExistingDecoys = file.playerControllingDecoys[ player ]
	
	foreach ( entity decoy in preExistingDecoys )
	{
		if ( !IsValid( decoy ) )
			continue

		entity newDecoy = CreatePlayerMirageDecoy( player, 1, weapon )
		newDecoy.SetMaxHealth( decoy.GetMaxHealth() )
		newDecoy.SetHealth( decoy.GetHealth() )
		// calculate decoy lifetime
		float timeLeft = file.decoyCreationTime[ decoy ] + MIRAGE_DECOY_DURATION - Time()
		newDecoy.SetTimeout( timeLeft )

		thread ReplacementDecoyThink( newDecoy, decoy )
	}
}

void function DelayedShowReplacementDecoy( entity newDecoy, entity preExistingDecoy )
{
	newDecoy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_NOBODY // temp hide
	newDecoy.EndSignal( "OnDestroy" )

	wait 0.2 // the cloak out effect duration
	newDecoy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
	if ( IsValid( preExistingDecoy ) )
	{
		playerControllingDecoys
		preExistingDecoy.Destroy() // destroy the pre existing decoy
	}
}

entity function CreatePlayerMirageDecoy( entity player, int numberOfDecoysToMake = 1, entity weapon = null )
{
	float displacementDistance = 30.0

	bool setOriginAndAngles = numberOfDecoysToMake > 1

	float stickPercentToRun = 0.65
	if ( setOriginAndAngles )
		stickPercentToRun = 0.0

	entity decoy
	for( int i = 0; i < numberOfDecoysToMake; ++i )
	{
		decoy = player.CreatePlayerDecoy( stickPercentToRun )
		print( decoy ) // want to test what class decoys are?
		file.decoyCreationTime[ decoy ] <- Time()
		decoy.SetMaxHealth( MIRAGE_DECOY_HEALTH )
		decoy.SetHealth( MIRAGE_DECOY_HEALTH )
		decoy.EnableAttackableByAI( 50, 0, AI_AP_FLAG_NONE )
		SetObjectCanBeMeleed( decoy, true )
		decoy.SetTimeout( MIRAGE_DECOY_DURATION )
		if ( setOriginAndAngles )
		{
			vector angleToAdd = CalculateAngleSegmentForDecoy( i, HOLOPILOT_ANGLE_SEGMENT )
			vector normalizedAngle = player.GetAngles() +  angleToAdd
			normalizedAngle.y = AngleNormalize( normalizedAngle.y ) //Only care about changing the yaw
			decoy.SetAngles( normalizedAngle )

			vector forwardVector = AnglesToForward( normalizedAngle )
			forwardVector *= displacementDistance
			decoy.SetOrigin( player.GetOrigin() + forwardVector ) //Using player origin instead of decoy origin as defensive fix, see bug 223066
			PutEntityInSafeSpot( decoy, player, null, player.GetOrigin(), decoy.GetOrigin()  )
		}
	}

	#if BATTLECHATTER_ENABLED
		PlayBattleChatterLine( player, "bc_pHolo" )
	#endif
}

vector function GetDirectionFromInput( vector playerAngles, float xAxis, float yAxis )
{
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}
#endif
