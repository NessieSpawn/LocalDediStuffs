global function No_Iron_Sight_Weapons_Init

global function NoIronSightWeapon_FindModsForWeapon
global function NoIronSightWeapon_ReplacePlayerLoadout

const array<string> DISABLED_WEAPONS = 
[
    "mp_weapon_epg", 
    "mp_weapon_smr", 
    "mp_weapon_softball", 
    "mp_weapon_pulse_lmg",
    "mp_weapon_doubletake", 
    "mp_weapon_semipistol", 
    "mp_weapon_shotgun_pistol", 
    "mp_weapon_wingman",
    "mp_weapon_wingman_n",
    "mp_weapon_defender",
    "mp_weapon_arc_launcher",
    "mp_weapon_rocket_launcher",
    "mp_weapon_mgl",
] // weapons that don't have replacement scopes

const table<string, string> SPECIAL_REPLACEMENT_WEAPONS = 
{
    // weapons that use "stabilizer" to disable sniper scope
    ["mp_weapon_sniper"] = "stabilizer",                          
    ["mp_weapon_dmr"] = "stabilizer",
    // weapons that already has a mod in vanilla
    ["mp_weapon_autopistol"] = "temp_sight",
}

const array<string> DISABLED_MODS = 
[
    "hcog",
    "redline_sight",
    "holosight",
    "aog",
    "threat_scope",
    "scope_4x",
    "stabilizer",
    "no_ironsight_weapon",
    "fake_stabilizer",
    "fake_threat_scope"
] // weapons that already have a optic, cannot use together

void function No_Iron_Sight_Weapons_Init()
{

}

array<string> function NoIronSightWeapon_FindModsForWeapon( entity weapon )
{
    if ( !IsValid( weapon ) )
        return []
    if( !IsWeaponAbleToRemoveSight( weapon ) )
        return []

    string weaponName = weapon.GetWeaponClassName()
    //print( className )
    array<string> mods = weapon.GetMods()
    if( weaponName in SPECIAL_REPLACEMENT_WEAPONS ) // has a replacement mod?
        mods.append( SPECIAL_REPLACEMENT_WEAPONS[ weaponName ] )
    else
        mods.append( "no_ironsight_weapon" )
    return mods
}

void function NoIronSightWeapon_ReplacePlayerLoadout( entity player )
{
    array<entity> weapons = player.GetMainWeapons()
    foreach( int index, entity weapon in weapons )
    {
        //print( "checking weapon!" )
        if( IsWeaponAbleToRemoveSight( weapon ) )
        {
            string weaponName = weapon.GetWeaponClassName()
            //print( className )
            array<string> mods = NoIronSightWeapon_FindModsForWeapon( weapon )
            int skin = weapon.GetSkin()
            int camo = weapon.GetCamo()
            weapon.Destroy() // take out exact weapon
            entity curWeapon = player.GiveWeapon( weaponName, mods )
            if( IsValid( curWeapon ) )
            {
                curWeapon.SetSkin( skin )
                curWeapon.SetCamo( camo )
            }
        }
    }
}

bool function IsWeaponAbleToRemoveSight( entity weapon )
{
    if( !IsValid( weapon ) )
        return false

    string classname = weapon.GetWeaponClassName()
    if( DISABLED_WEAPONS.contains( classname ) )
    {
        //print( "returning false because weapon in blacklist" )
        return false
    }

    array<string> mods = weapon.GetMods()
    foreach( string mod in mods )
    {
        if( DISABLED_MODS.contains( mod ) )
        {
            //print( "returning false because mod in blacklist" )
            return false
        }
    }

    return true
}