global function MpAbilityPersonalTurret_Init

global function OnWeaponAttemptOffhandSwitch_personal_turret
global function OnWeaponPrimaryAttack_personal_turret

const float PERSONAL_TURRET_LIFETIME = 15

void function MpAbilityPersonalTurret_Init()
{
    
}

bool function OnWeaponAttemptOffhandSwitch_personal_turret( entity weapon )
{
    int ammoPerShot = weapon.GetAmmoPerShot()
    int currAmmo = weapon.GetWeaponPrimaryClipCount()
    if ( currAmmo < ammoPerShot )
        return false

    return true
}

var function OnWeaponPrimaryAttack_personal_turret( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity ownerPlayer = weapon.GetWeaponOwner()
    if ( !ownerPlayer.IsPlayer() )
        return 0

    #if SERVER
        string turretType = "npc_turret_sentry"
        string turretAiSettings = "npc_turret_sentry_burn_card_ap"
        string turretWeapon = ""
        int turretHealth = 100
        float turretModelScale = 0.5
        if( weapon.HasMod( "personal_plasma_turret" ) )
        {
            turretAiSettings = "npc_turret_sentry_burn_card_at"
            turretHealth = 200
        }
        if( weapon.HasMod( "personal_mega_turret" ) )
        {
            turretType = "npc_turret_mega"
            turretAiSettings = "npc_turret_mega_attrition"
            turretHealth = 500
            turretModelScale = 0.1
        }
        thread SpawnPersonalTurretTimed( ownerPlayer, PERSONAL_TURRET_LIFETIME, turretModelScale, turretHealth, turretType, turretAiSettings, turretWeapon )
        thread StopCooldownWhileActive( weapon, PERSONAL_TURRET_LIFETIME )
        ownerPlayer.HolsterWeapon()
        ownerPlayer.DeployWeapon()
        EmitSoundOnEntity( ownerPlayer, "Boost_Card_SentryTurret_Deployed_3P" )
        SendHudMessage( ownerPlayer, "已创建个人炮台", -1, -0.35, 255, 255, 100, 255, 0, 5, 0 )
        //weapon.SetNextAttackAllowedTime( Time() + 35 )
        weapon.SetWeaponPrimaryClipCountAbsolute( 0 )
    #endif

    return 0 // always mark as canot fire, we reduced ammo manually
}

#if SERVER
void function StopCooldownWhileActive( entity offhand, float duration )
{
	offhand.AddMod( "no_regen" )
	wait duration
	if( IsValid( offhand ) )
		offhand.RemoveMod( "no_regen" )
}
#endif