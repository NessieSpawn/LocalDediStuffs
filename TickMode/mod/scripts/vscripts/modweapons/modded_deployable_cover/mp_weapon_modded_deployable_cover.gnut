// everything about modded stim goes here
global function MpWeaponModdedDeployableCover_Init

global function OnWeaponTossReleaseAnimEvent_weapon_modded_deployable_cover
global function OnProjectileCollision_weapon_modded_deployable_cover

global function AddModdedDeployableCoverTossReleaseAnimEventCallback
global function AddModdedDeployableCoverProjectileCollisionCallback

struct
{
    table< string, var functionref( entity, WeaponPrimaryAttackParams ) ornull > moddedTossReleaseAnimEventCallbacks
    table< string, void functionref( entity, vector, vector, entity, int, bool ) ornull > moddedProjectileCollisionCallbacks
} file

void function MpWeaponModdedDeployableCover_Init()
{

}

void function AddModdedDeployableCoverTossReleaseAnimEventCallback( string modName, var functionref( entity weapon, WeaponPrimaryAttackParams attackParams ) ornull primaryAttackFunc )
{
    if ( !( modName in file.moddedTossReleaseAnimEventCallbacks ) )
        file.moddedTossReleaseAnimEventCallbacks[modName] <- null

    file.moddedTossReleaseAnimEventCallbacks[modName] = primaryAttackFunc
}

void function AddModdedDeployableCoverProjectileCollisionCallback( string modName, void functionref( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical ) ornull projectileCollisionFunc )
{
    if ( !( modName in file.moddedProjectileCollisionCallbacks ) )
        file.moddedProjectileCollisionCallbacks[modName] <- null

    file.moddedProjectileCollisionCallbacks[modName] = projectileCollisionFunc
}

var function OnWeaponTossReleaseAnimEvent_weapon_modded_deployable_cover( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedTossReleaseAnimEventCallbacks )
        {
            if ( file.moddedTossReleaseAnimEventCallbacks[mod] != null )
            {
                return ( expect var functionref( entity, WeaponPrimaryAttackParams ) ( file.moddedTossReleaseAnimEventCallbacks[mod] ) )( weapon, attackParams )
            }
        }
    }
}

void function OnProjectileCollision_weapon_modded_deployable_cover( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedProjectileCollisionCallbacks )
        {
            if ( file.moddedProjectileCollisionCallbacks[mod] != null )
            {
                return ( expect void functionref( entity, vector, vector, entity, int, bool ) ( file.moddedProjectileCollisionCallbacks[mod] ) )( projectile, pos, normal, hitEnt, hitbox, isCritical )
            }
        }
    }
}