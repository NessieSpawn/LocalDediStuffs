global function MpWeaponAntiGravityStar_Init

global function OnProjectileCollision_weapon_anti_gravity_star

const asset GRAVITY_VORTEX_FX = $"P_wpn_grenade_gravity"

// Anti Gravity Star
const float MAX_WAIT_TIME_ANTI = 6.0
const float POP_DELAY_ANTI = 0.1
const float PULL_DELAY_ANTI = 2.0
const float PUSH_DELAY_ANTI = 0.2
const float POP_HEIGHT_ANTI = 1
const float PULL_RANGE_ANTI = 150.0
const float PULL_STRENGTH_MAX_ANTI = 300.0
const float PULL_VERT_VEL_ANTI = 60
const float PUSH_STRENGTH_MAX_ANTI = 0.0
const float EXPLOSION_DELAY_ANTI = 0.1
const float FX_END_CAP_TIME_ANTI = 1.5
//const float PULL_VERTICAL_KNOCKUP_MAX = 75.0
//const float PULL_VERTICAL_KNOCKUP_MIN = 55.0
//const float PUSH_STRENGTH_MIN = 100.0

void function MpWeaponAntiGravityStar_Init()
{

}

void function OnProjectileCollision_weapon_anti_gravity_star( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    bool didStick = PlantSuperStickyGrenade( projectile, pos, normal, hitEnt, hitbox )

	if ( !didStick )
		return

	if ( projectile.IsMarkedForDeletion() )
		return

	#if SERVER
		thread AntiGravityGrenadeThink( projectile, hitEnt, normal, pos )
	#endif
}

#if SERVER
void function AntiGravityGrenadeThink( entity projectile, entity hitEnt, vector normal, vector pos )
{
	projectile.EndSignal( "OnDestroy" )

	WaitFrame()

	array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
	SetTeam( projectile, TEAM_UNASSIGNED ) // anti_gravity all players, or pull all players

	vector pullPosition
	if ( hitEnt == svGlobal.worldspawn )
		pullPosition = pos + normal * POP_HEIGHT_ANTI
	else
		pullPosition = projectile.GetOrigin()

	entity gravTrig = CreateEntity( "trigger_point_gravity" )
	// pull inner radius, pull outer radius, reduce speed inner radius, reduce speed outer radius, pull accel, pull speed, 0
	gravTrig.SetParams( 0.0, PULL_RANGE_ANTI * 2, 32, 128, 1500, 600 )
	gravTrig.SetOrigin( projectile.GetOrigin() )
	projectile.ClearParent()
	projectile.SetParent( gravTrig )
	gravTrig.RoundOriginAndAnglesToNearestNetworkValue()

	entity trig = CreateEntity( "trigger_cylinder" )
	trig.SetRadius( PULL_RANGE_ANTI )
	trig.SetAboveHeight( PULL_RANGE_ANTI )
	trig.SetBelowHeight( PULL_RANGE_ANTI )
	trig.SetOrigin( projectile.GetOrigin() )
	SetAntiGravityGrenadeTriggerFilters( projectile, trig )
	trig.kv.triggerFilterPlayer = "none" // player effects
	trig.SetEnterCallback( OnAntiGravTrigEnter )

	SetTeam( gravTrig, projectile.GetTeam() )
	SetTeam( trig, projectile.GetTeam() )
	DispatchSpawn( gravTrig )
	DispatchSpawn( trig )
	gravTrig.SearchForNewTouchingEntity()
	trig.SearchForNewTouchingEntity()

	EmitSoundOnEntity( projectile, "default_gravitystar_impact_3p" )
	entity FX = StartParticleEffectOnEntity_ReturnEntity( projectile, GetParticleSystemIndex( GRAVITY_VORTEX_FX ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
//	EmitSoundOnEntity( projectile, "gravitystar_vortex" )

	string noSpawnArea = CreateNoSpawnArea( TEAM_INVALID, projectile.GetTeam(), projectile.GetOrigin(), MAX_WAIT_TIME_ANTI + POP_DELAY_ANTI + PULL_DELAY_ANTI + EXPLOSION_DELAY_ANTI + 0.1, PULL_RANGE_ANTI * 3.0 )

	OnThreadEnd(
		function() : ( gravTrig, trig, FX, noSpawnArea )
		{
			if ( IsValid( trig ) )
				trig.Destroy()
			if ( IsValid( gravTrig ) )
				gravTrig.Destroy()

			EntFireByHandle( FX, "kill", "", FX_END_CAP_TIME_ANTI, null, null )

			DeleteNoSpawnArea( noSpawnArea )
		}
	)
	
	// early version behavior!
	if ( mods.contains( "gravity_mine" ) && !hitEnt.IsPlayer() && !hitEnt.IsNPC() )
		GravityGrenadeTriggerThink( projectile ) 

	wait POP_DELAY_ANTI

	entity mover = CreateOwnedScriptMover( projectile )
	projectile.SetParent( mover, "ref", true )
	EmitSoundOnEntity( projectile, "weapon_gravitystar_preexplo" )

	if ( hitEnt == svGlobal.worldspawn )
	{
		mover.NonPhysicsMoveTo( pullPosition, POP_DELAY_ANTI, 0, POP_DELAY_ANTI )
		gravTrig.SetOrigin( pullPosition )
		gravTrig.RoundOriginAndAnglesToNearestNetworkValue()
	}

	// full strength radius, outer radius, reduce vel radius, accel, maxvel
	gravTrig.SetParams( PULL_RANGE_ANTI, PULL_RANGE_ANTI * 2, 32, 128, -1500, 400 )

	AI_CreateDangerousArea( projectile, projectile, PULL_RANGE_ANTI * 2.0, TEAM_INVALID, true, false )

	wait PULL_DELAY_ANTI

	projectile.SetGrenadeTimer( EXPLOSION_DELAY_ANTI )
		
	wait EXPLOSION_DELAY_ANTI - 0.1 // ensure gravTrig is destroyed before detonation

	thread DestroyAfterDelay( mover, 0.25 )
}

void function OnAntiGravTrigEnter( entity trigger, entity ent )
{
	if ( ent.GetTeam() != trigger.GetTeam() )
		return

	if ( ent.IsPlayer() )
	{
		StatusEffect_StopAll( ent, eStatusEffect.gravity_grenade_visual ) // stop the visual effect given by the trigger
	}
}

void function SetAntiGravityGrenadeTriggerFilters( entity gravityMine, entity trig )
{
	// remove all filters
	trig.kv.triggerFilterTeamIMC = "0"
	trig.kv.triggerFilterTeamMilitia = "0"
	trig.kv.triggerFilterNonCharacter = "0"
}
#endif