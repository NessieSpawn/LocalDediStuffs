// everything about modded stim goes here
global function MpAbilityModdedStim_Init

global function OnWeaponPrimaryAttack_ability_modded_stim
global function OnWeaponTossPrep_ability_modded_stim
global function OnWeaponTossReleaseAnimEvent_ability_modded_stim
global function OnProjectileCollision_ability_modded_stim

global function ModdedStim_AddPrimaryAttackCallback
global function ModdedStim_AddTossPrepCallback
global function ModdedStim_AddTossReleaseAnimEventCallback
global function ModdedStim_AddProjectileCollisionCallback

struct
{
    table< string, var functionref( entity, WeaponPrimaryAttackParams ) > moddedPrimaryAttackCallbacks
    table< string, void functionref( entity, WeaponTossPrepParams ) > moddedTossPrepCallbacks
    table< string, var functionref( entity, WeaponPrimaryAttackParams ) > moddedTossReleaseCallbacks
    table< string, void functionref( entity, vector, vector, entity, int, bool ) > moddedProjectileCollisionCallbacks
} file

void function MpAbilityModdedStim_Init()
{

}

void function ModdedStim_AddPrimaryAttackCallback( string modName, var functionref( entity weapon, WeaponPrimaryAttackParams attackParams ) primaryAttackFunc )
{
    if ( !( modName in file.moddedPrimaryAttackCallbacks ) )
        file.moddedPrimaryAttackCallbacks[modName] <- null

    file.moddedPrimaryAttackCallbacks[modName] = primaryAttackFunc
}

void function ModdedStim_AddTossPrepCallback( string modName, void functionref( entity weapon, WeaponTossPrepParams prepParams ) tossPrepFunc )
{
    if ( !( modName in file.moddedTossPrepCallbacks ) )
        file.moddedTossPrepCallbacks[modName] <- null

    file.moddedTossPrepCallbacks[modName] = tossPrepFunc
}

void function ModdedStim_AddTossReleaseAnimEventCallback( string modName, var functionref( entity weapon, WeaponPrimaryAttackParams attackParams ) tossReleaseFunc )
{
    if ( !( modName in file.moddedTossReleaseCallbacks ) )
        file.moddedTossReleaseCallbacks[modName] <- null

    file.moddedTossReleaseCallbacks[modName] = tossReleaseFunc
}

void function ModdedStim_AddProjectileCollisionCallback( string modName, void functionref( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical ) projectileCollisionFunc )
{
    if ( !( modName in file.moddedProjectileCollisionCallbacks ) )
        file.moddedProjectileCollisionCallbacks[modName] <- null

    file.moddedProjectileCollisionCallbacks[modName] = projectileCollisionFunc
}

var function OnWeaponPrimaryAttack_ability_modded_stim( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedPrimaryAttackCallbacks )
        {
            if ( file.moddedPrimaryAttackCallbacks[ mod ] != null )
                return file.moddedPrimaryAttackCallbacks[ mod ]( weapon, attackParams )
        }
    }
}

void function OnWeaponTossPrep_ability_modded_stim( entity weapon, WeaponTossPrepParams prepParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedTossPrepCallbacks )
        {
            if ( file.moddedTossPrepCallbacks[ mod ] != null )
                return file.moddedTossPrepCallbacks[ mod ]( weapon, prepParams )
        }
    }
}

var function OnWeaponTossReleaseAnimEvent_ability_modded_stim( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedTossReleaseCallbacks )
        {
            if ( file.moddedTossReleaseCallbacks[ mod ] != null )
                return file.moddedTossReleaseCallbacks[ mod ]( weapon, attackParams )
        }
    }
}

void function OnProjectileCollision_ability_modded_stim( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedProjectileCollisionCallbacks )
        {
            if ( file.moddedProjectileCollisionCallbacks[ mod ] != null )
                return file.moddedProjectileCollisionCallbacks[ mod ]( projectile, pos, normal, hitEnt, hitbox, isCritical )
        }
    }
}