global function MpAbilityOctaneStim_Init

global function OnWeaponPrimaryAttack_ability_octane_stim

const float STIM_EFFECT_SEVERITY_OCTANE = 0.25
const int OCTANE_STIM_DAMAGE = 20
const int OCTANE_STIM_DAMAGE_GRUNT = 13

void function MpAbilityOctaneStim_Init()
{
	// init for modded stim
    AddStimModifier( "octane_stim" )
    ModdedStim_AddPrimaryAttackCallback( "octane_stim", OnWeaponPrimaryAttack_ability_octane_stim )

    #if SERVER
    RegisterSignal( "OctaneStimStart" )
    #endif
}

var function OnWeaponPrimaryAttack_ability_octane_stim( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity ownerPlayer = weapon.GetWeaponOwner()
    float duration = weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration )
    
    StimPlayer( ownerPlayer, duration, STIM_EFFECT_SEVERITY_OCTANE )
    #if SERVER
		// gruntmode specific
		bool regenHealthAfterUse = !weapon.HasMod( "gm_runner" ) 
		int maxDamage = weapon.HasMod( "gm_runner" ) ? OCTANE_STIM_DAMAGE_GRUNT : OCTANE_STIM_DAMAGE
    	thread OctaneStimThink( ownerPlayer, duration, maxDamage, regenHealthAfterUse )
    #endif
    return weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
}

#if SERVER
// low recharge stim, disables health regen while activating, less speed boost, with long duration almost no cooldown
void function OctaneStimThink( entity player, float duration, int maxDamage, bool regenHealthAfterUse = true )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "OctaneStimStart" )
	player.EndSignal( "OctaneStimStart" )
	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				if ( !IsValid( player.GetTitanSoulBeingRodeoed() ) ) // rodeo will handle onehanded usage
					player.SetOneHandedWeaponUsageOff()
			}
		}
	)
	float startTime = Time()
	float damageTaken = min( fabs( float( player.GetHealth() ) - 1.0 ), float( maxDamage ) )
	//print( "damageTaken: " + string( damageTaken ) )
	player.TakeDamage( int( damageTaken ), player, player, { scriptType = DF_BYPASS_SHIELD, damageSourceId = eDamageSourceId.bleedout } )
	while( true )
	{
		wait 0.1
		if( IsValid( player ) )
		{
			player.p.lastDamageTime = Time()
			player.SetOneHandedWeaponUsageOn()
		}
		else
			return
		if( Time() >= startTime + duration )
		{
			if( IsValid( player ) )
			{
				if ( regenHealthAfterUse )
					player.p.lastDamageTime = 0 // set lastDamageTime to gametime 0, will start health regen
			}
			return
		}
	}
}
#endif