global function MpAbilityModdedShifter_Init

global function OnWeaponTossPrep_ability_modded_shifter
global function OnWeaponPrimaryAttack_ability_modded_shifter

global function ModdedShifter_AddTossPrepCallback
global function ModdedShifter_AddPrimaryAttackCallback

struct
{
    table< string, void functionref( entity, WeaponTossPrepParams ) > moddedTossPrepCallbacks
    table< string, var functionref( entity, WeaponPrimaryAttackParams ) > moddedPrimaryAttackCallbacks
} file

void function MpAbilityModdedShifter_Init()
{

}

void function ModdedShifter_AddTossPrepCallback( string modName, void functionref( entity weapon, WeaponTossPrepParams prepParams ) tossPrepFunc )
{
    if ( !( modName in file.moddedPrimaryAttackCallbacks ) )
        file.moddedTossPrepCallbacks[modName] <- null

    file.moddedTossPrepCallbacks[modName] = tossPrepFunc
}

void function ModdedShifter_AddPrimaryAttackCallback( string modName, var functionref( entity weapon, WeaponPrimaryAttackParams attackParams ) primaryAttackFunc )
{
    if ( !( modName in file.moddedPrimaryAttackCallbacks ) )
        file.moddedPrimaryAttackCallbacks[modName] <- null

    file.moddedPrimaryAttackCallbacks[modName] = primaryAttackFunc
}

void function OnWeaponTossPrep_ability_modded_shifter( entity weapon, WeaponTossPrepParams prepParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedTossPrepCallbacks )
        {
            if ( file.moddedTossPrepCallbacks[ mod ] != null )
                return file.moddedTossPrepCallbacks[ mod ]( weapon, prepParams )
        }
    }
}

var function OnWeaponPrimaryAttack_ability_modded_shifter( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    array<string> mods = weapon.GetMods()
    foreach ( string mod in mods )
    {
        if ( mod in file.moddedPrimaryAttackCallbacks )
        {
            if ( file.moddedPrimaryAttackCallbacks[ mod ] != null )
            {
                return file.moddedPrimaryAttackCallbacks[ mod ]( weapon, attackParams )
            }
        }
    }
}