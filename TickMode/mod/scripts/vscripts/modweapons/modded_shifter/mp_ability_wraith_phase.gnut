global function MpAbilityWraithPhase_Init

global function OnWeaponTossPrep_ability_wraith_phase

const float SHIFTER_WARMUP_TIME_WRAITH = 1.25
const float WRAITH_SEVERITY_SLOWMOVE = 0.25
const float SHIFTER_SLOWMOVE_TIME_WRAITH = 1.25
const float WRAITH_SPEED_BOOST_SEVERITY = 0.25

void function MpAbilityWraithPhase_Init()
{
	// init for modded shifter
    AddShifterModifier( "wraith_phase" )
    ModdedShifter_AddTossPrepCallback( "wraith_phase", OnWeaponTossPrep_ability_wraith_phase )

	#if SERVER
	RegisterSignal( "WraithPhaseStart" )
	RegisterSignal( "WraithPhaseCanceled" )
	#endif
}

void function OnWeaponTossPrep_ability_wraith_phase( entity weapon, WeaponTossPrepParams prepParams )
{
    entity weaponOwner = weapon.GetWeaponOwner()

    // a modified phaseShift: won't tell client to use warp-in effect
    int phaseResult = PhaseShift( weaponOwner, SHIFTER_WARMUP_TIME_WRAITH, weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration ), true )
    if( phaseResult )
    {
        #if SERVER
		thread WraithPhaseThink( weaponOwner, weapon )
		// all handle in server-side
		if ( weaponOwner.IsPlayer() )
		{
			EmitSoundOnEntityOnlyToPlayer( weaponOwner, weaponOwner, "Pilot_PhaseShift_PreActivate_1P" )
			EmitSoundOnEntityExceptToPlayer( weaponOwner, weaponOwner, "Pilot_PhaseShift_PreActivate_3P" )
			Remote_CallFunction_NonReplay( weaponOwner, "ServerCallback_PlayScreenFXWarpJump" )
			//StatusEffect_AddTimed( weaponOwner, eStatusEffect.timeshift_visual_effect, 1.0, SHIFTER_WARMUP_TIME_WRAITH, 0.5 )
		}
		else
			EmitSoundOnEntity( weaponOwner, "Pilot_PhaseShift_PreActivate_3P" )
        
        // for syncing cooldown
        PlayerUsedOffhand( weaponOwner, weapon )
        #if BATTLECHATTER_ENABLED
            TryPlayWeaponBattleChatterLine( weaponOwner, weapon )
        #endif
        #endif
    }
}

#if SERVER
entity function CreatePhaseShiftTrail( entity ent )
{
	int attachIndex = ent.LookupAttachment( "CHESTFOCUS" )
	if ( attachIndex < 0 ) // can't find!
		attachIndex = ent.LookupAttachment( "ref" ) // use ref instead
	entity portalTrail = StartParticleEffectOnEntity_ReturnEntity( ent, HOLO_PILOT_TRAIL_FX, FX_PATTACH_POINT_FOLLOW, attachIndex )
	return portalTrail
}

void function DestroyTrailAfterExitPhase( entity ent, entity trail )
{
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( trail )
		{
			if( IsValid( trail ) )
				EffectStop( trail )
		}
	)
	ent.WaitSignal( "StopPhaseShift" )
}

void function WraithPhaseThink( entity weaponOwner, entity weapon )
{
	// start other threads
	thread WraithPhaseTrailThink( weaponOwner )
	thread DisableShifterWeapon( weaponOwner ) // for better client visual
	thread WraithPhaseAmmoReduction( weaponOwner, weapon ) // ammo calculate
	thread WraithPhaseMovementEffect( weaponOwner, weapon )

	weaponOwner.EndSignal( "OnDeath" )
	weaponOwner.EndSignal( "OnDestroy" )
	weaponOwner.EndSignal( "StartPhaseShift" ) // if player entered other source of phaseShift we consider they're not using wraith phase
	weapon.EndSignal( "OnDestroy" )

	table results = {}
	results.enteredWraithPhase <- false

	OnThreadEnd(
		function(): ( weaponOwner, results )
		{
			if ( IsValid( weaponOwner ) )
			{
				if ( !results.enteredWraithPhase )
					weaponOwner.Signal( "WraithPhaseCanceled" ) // consider this means shifter has been canceled accidently
			}
		}
	)

	wait SHIFTER_WARMUP_TIME_WRAITH - 0.1 // wait for warmUps, -0.1s earlier for avoiding "StartPhaseShift" signal

	weaponOwner.Signal( "WraithPhaseStart" ) // consider this means player successfully entered wraith phase
	results.enteredWraithPhase = true
}

void function WraithPhaseTrailThink( entity player )
{
	wait SHIFTER_WARMUP_TIME_WRAITH + 0.1
	if( !IsAlive( player ) )
		return
	if( !player.IsPhaseShifted() )
		return
	entity phaseTrail = CreatePhaseShiftTrail( player )
	thread DestroyTrailAfterExitPhase( player, phaseTrail )
}

void function DisableShifterWeapon( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "WraithPhaseStart" )
	player.EndSignal( "WraithPhaseCanceled" )

	OnThreadEnd(
		function(): ( player )
		{
			if ( IsValid( player ) )
			{
				player.DeployWeapon()
			}
		}
	)

	// hardcoded for third person animations!!! at least let players do an "phase" animation
	if ( player.IsSliding() ) // slide will have a much shorter animation
		wait 0.1
	else // other movement state will need 0.2s to player a tp animation
		wait 0.2

	while ( true )
	{
		player.HolsterWeapon()
		WaitFrame()
	}
}

void function WraithPhaseAmmoReduction( entity owner, entity weapon )
{
	owner.EndSignal( "OnDeath" )
	owner.EndSignal( "OnDestroy" )
	owner.EndSignal( "WraithPhaseCanceled" )
	weapon.EndSignal( "OnDestroy" )

	owner.WaitSignal( "WraithPhaseStart" ) // wait for entering the phase
	// if reaches here it means shifter has been used properly
	int ammoReduce = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
	weapon.SetWeaponPrimaryClipCountAbsolute( max( 0, weapon.GetWeaponPrimaryClipCount() - ammoReduce ) )
}

void function WraithPhaseMovementEffect( entity weaponOwner, entity weapon )
{
	weaponOwner.EndSignal( "OnDeath" )
	weaponOwner.EndSignal( "OnDestroy" )
	weaponOwner.EndSignal( "WraithPhaseCanceled" ) // if player entered other source of phaseShift we consider they're not using wraith phase
	weapon.EndSignal( "OnDestroy" )

	StatusEffect_AddTimed( weaponOwner, eStatusEffect.move_slow, WRAITH_SEVERITY_SLOWMOVE, SHIFTER_SLOWMOVE_TIME_WRAITH, 0 )
	weaponOwner.WaitSignal( "WraithPhaseStart" ) // wait for entering the phase

	float shiftTime = weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration )
	StatusEffect_AddTimed( weaponOwner, eStatusEffect.speed_boost, WRAITH_SPEED_BOOST_SEVERITY, shiftTime + 0.5, 0.25 )
}
#endif